/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jpirsch <jpirsch@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2014/11/18 20:53:08 by jpirsch           #+#    #+#             */
/*   Updated: 2014/11/21 09:54:56 by jpirsch          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <libft.h>
#include <sys/types.h>
#include <sys/uio.h>
#include "get_next_line.h"

int		ret_line(char *buf, char **tmp, char **line)
{
	// verifier si tmp est vide ou pas si pas vide strjoin
	// decoupage de la ligne jusqua /n
	// verification apres /n du surplut
	//*line = tmp + buff ou buff si tmp est vide en fesant un dup
	return (1);
}

void	*line_join(char *buf, char **tmp)
{
	
// if tmp == NULL dup
// else if tmp != NULL strjoin

	size_t	len;
	char	*line;

	len = ft_strchr_len(buf, '\n');
		len = ft_strchr_len(buf, '\n');
		line = malloc(sizeof(char*) * len + 1);
		if (len)
			*line = ft_strsub(buf, 0, len);
		buf += (len + 1);
		*line = ft_strdup(buf);
}

int		get_next_line(const int fd, char **line)
{
	char			buf[BUF_SIZE + 1];
	int				ret;
	static char		*tmp[256];

	if (fd < 0)
		return (-1);
	// verifier si tmp a un \n
	while ((ret = read(fd, buf, BUF_SIZE)))
	{
		if (ret == -1)
			return (-1);
		if (ft_strchr(buf, '\n') != NULL)
			return (ret_line);
		else if (ft_strchr(buf, '\n') == NULL)
			ft_line_join(buf, &tmp[0]);
		// if si /n return line
		// else if si pas /n join
	}
	return (0);
}


/*
	if ((ret = read(fd, buf, BUF_SIZE)) > 0)
	{
		buf[ret] = '\0';
	}
	else if
	{
	}
	else*/
